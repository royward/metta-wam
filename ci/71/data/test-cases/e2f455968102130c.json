{"uid":"e2f455968102130c","name":"BC-COMP.02","historyId":"ANTI-REGRESSION:ANTI-REGRESSION#BC-COMP.02","time":{"start":1727479741000,"stop":1727479741002,"duration":2},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://royward.github.io/metta-wam/reports/tests_output/baseline-compat/tests/baseline_compat/anti-regression/bc_comp.metta.0_failed.html#ANTI-REGRESSION.BC-COMP.02\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqualToResult (add-atom &kb (: rule1 (-> (nums $x $y) (rule1output $x $y)))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: (())","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: (())","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"ANTI-REGRESSION"},{"name":"testClass","value":"ANTI-REGRESSION"},{"name":"package","value":"ANTI-REGRESSION"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":6},"items":[{"uid":"bcad5a251de6d6a4","reportUrl":"https://royward.github.io/metta-wam/ci/70//#testresult/bcad5a251de6d6a4","status":"passed","time":{"start":1727478423000,"stop":1727478423002,"duration":2}},{"uid":"8781681d9dbf2caf","reportUrl":"https://royward.github.io/metta-wam/ci/68//#testresult/8781681d9dbf2caf","status":"passed","time":{"start":1727471580000,"stop":1727471580002,"duration":2}},{"uid":"dcc6a7da0f1606d7","reportUrl":"https://royward.github.io/metta-wam/ci/67//#testresult/dcc6a7da0f1606d7","status":"passed","time":{"start":1727459950000,"stop":1727459950002,"duration":2}},{"uid":"606c395a842b317","reportUrl":"https://royward.github.io/metta-wam/ci/66//#testresult/606c395a842b317","status":"passed","time":{"start":1727459691000,"stop":1727459691002,"duration":2}},{"uid":"fcbe34f20da45ee0","reportUrl":"https://royward.github.io/metta-wam/ci/65//#testresult/fcbe34f20da45ee0","status":"passed","time":{"start":1727459223000,"stop":1727459223002,"duration":2}}]},"tags":[]},"source":"e2f455968102130c.json","parameterValues":[]}