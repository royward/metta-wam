{"uid":"b52c86c47e9a759d","name":"NALIFIER.01","historyId":"METTA-MORPH-TESTS:METTA-MORPH-TESTS#NALIFIER.01","time":{"start":1732135775000,"stop":1732135775157,"duration":157},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://royward.github.io/metta-wam/reports/tests_output/baseline-compat/tests/baseline_compat/metta-morph_tests/nalifier.metta.0_failed.html#METTA-MORPH-TESTS.NALIFIER.01\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqualToResult (let ($S $EV) (choiceQuery (((ExtSet sam) --> duck) ((ExtSet sam) --> swan) ((ExtSet sam) --> dog))) $S))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: ((((ExtSet sam) --> duck) (1.0 0.618320610687023)))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: ((((ExtSet sam) --> duck) (1.0 0.6183206106870229)))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"METTA-MORPH-TESTS"},{"name":"testClass","value":"METTA-MORPH-TESTS"},{"name":"package","value":"METTA-MORPH-TESTS"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"41c22e477d0d1b0a","reportUrl":"https://royward.github.io/metta-wam/ci/171//#testresult/41c22e477d0d1b0a","status":"passed","time":{"start":1731610022000,"stop":1731610022160,"duration":160}},{"uid":"fa31d14f9661a5c5","reportUrl":"https://royward.github.io/metta-wam/ci/168//#testresult/fa31d14f9661a5c5","status":"passed","time":{"start":1731438229000,"stop":1731438229184,"duration":184}},{"uid":"85fa47b11dd9f296","reportUrl":"https://royward.github.io/metta-wam/ci/166//#testresult/85fa47b11dd9f296","status":"passed","time":{"start":1731354038000,"stop":1731354038172,"duration":172}},{"uid":"f61b3991b93a69fa","reportUrl":"https://royward.github.io/metta-wam/ci/161//#testresult/f61b3991b93a69fa","status":"passed","time":{"start":1730952478000,"stop":1730952478152,"duration":152}},{"uid":"3f0c13f02aad475e","reportUrl":"https://royward.github.io/metta-wam/ci/157//#testresult/3f0c13f02aad475e","status":"passed","time":{"start":1730747933000,"stop":1730747933159,"duration":159}},{"uid":"e12e2a794c25a28c","reportUrl":"https://royward.github.io/metta-wam/ci/153//#testresult/e12e2a794c25a28c","status":"passed","time":{"start":1730503757000,"stop":1730503757153,"duration":153}},{"uid":"ade3968c6499a0f8","reportUrl":"https://royward.github.io/metta-wam/ci/152//#testresult/ade3968c6499a0f8","status":"passed","time":{"start":1730493476000,"stop":1730493476183,"duration":183}}]},"tags":[]},"source":"b52c86c47e9a759d.json","parameterValues":[]}