{"uid":"8ebece11b163877e","name":"D4-TYPE-PROP.06","historyId":"QUICK:QUICK#D4-TYPE-PROP.06","time":{"start":1732136032000,"stop":1732136032002,"duration":2},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://royward.github.io/metta-wam/reports/tests_output/baseline-compat/tests/baseline_compat/quick/d4_type_prop.metta.0_failed.html#QUICK.D4-TYPE-PROP.06\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqual (get-type (= (Mortal Socrates) (Mortal Plato))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: (Type)","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: (Type)","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"QUICK"},{"name":"testClass","value":"QUICK"},{"name":"package","value":"QUICK"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":8,"unknown":0,"total":8},"items":[{"uid":"abeadd9cecbff3c7","reportUrl":"https://royward.github.io/metta-wam/ci/171//#testresult/abeadd9cecbff3c7","status":"passed","time":{"start":1731610241000,"stop":1731610241001,"duration":1}},{"uid":"fb7694f27d25405","reportUrl":"https://royward.github.io/metta-wam/ci/168//#testresult/fb7694f27d25405","status":"passed","time":{"start":1731438451000,"stop":1731438451002,"duration":2}},{"uid":"a076ce2d1d789f5b","reportUrl":"https://royward.github.io/metta-wam/ci/166//#testresult/a076ce2d1d789f5b","status":"passed","time":{"start":1731354256000,"stop":1731354256002,"duration":2}},{"uid":"5f50f641cfc801cf","reportUrl":"https://royward.github.io/metta-wam/ci/161//#testresult/5f50f641cfc801cf","status":"passed","time":{"start":1730952693000,"stop":1730952693002,"duration":2}},{"uid":"20611fababfb1e1a","reportUrl":"https://royward.github.io/metta-wam/ci/157//#testresult/20611fababfb1e1a","status":"passed","time":{"start":1730748151000,"stop":1730748151002,"duration":2}},{"uid":"dfa2c57d3f48caf3","reportUrl":"https://royward.github.io/metta-wam/ci/153//#testresult/dfa2c57d3f48caf3","status":"passed","time":{"start":1730503971000,"stop":1730503971003,"duration":3}},{"uid":"e8852de3e251c3e6","reportUrl":"https://royward.github.io/metta-wam/ci/152//#testresult/e8852de3e251c3e6","status":"passed","time":{"start":1730493701000,"stop":1730493701003,"duration":3}}]},"tags":[]},"source":"8ebece11b163877e.json","parameterValues":[]}