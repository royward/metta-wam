{"uid":"a6f77149f0073d7d","name":"BCHAIN.03","historyId":"ANTI-REGRESSION:ANTI-REGRESSION#BCHAIN.03","time":{"start":1731607843000,"stop":1731607843001,"duration":1},"status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://royward.github.io/metta-wam/reports/tests_output/baseline-compat/tests/baseline_compat/anti-regression/bchain.metta.0_failed.html#ANTI-REGRESSION.BCHAIN.03\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqualToResult (add-atom &kb (: rule (-> (rule1output $x $y) (-> (⍃ $x $y) (less $x $y))))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: (())","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: (())","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"ANTI-REGRESSION"},{"name":"testClass","value":"ANTI-REGRESSION"},{"name":"package","value":"ANTI-REGRESSION"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":7},"items":[{"uid":"269c39efea7438a0","reportUrl":"https://royward.github.io/metta-wam/ci/168//#testresult/269c39efea7438a0","status":"passed","time":{"start":1731436019000,"stop":1731436019002,"duration":2}},{"uid":"7058c5077bafd8a0","reportUrl":"https://royward.github.io/metta-wam/ci/166//#testresult/7058c5077bafd8a0","status":"passed","time":{"start":1731351893000,"stop":1731351893002,"duration":2}},{"uid":"b5229d5a9afad1d5","reportUrl":"https://royward.github.io/metta-wam/ci/161//#testresult/b5229d5a9afad1d5","status":"passed","time":{"start":1730951464000,"stop":1730951464003,"duration":3}},{"uid":"9e455ac6ba3e54d6","reportUrl":"https://royward.github.io/metta-wam/ci/157//#testresult/9e455ac6ba3e54d6","status":"passed","time":{"start":1730746981000,"stop":1730746981001,"duration":1}},{"uid":"b4bf2898a822eca7","reportUrl":"https://royward.github.io/metta-wam/ci/153//#testresult/b4bf2898a822eca7","status":"passed","time":{"start":1730502810000,"stop":1730502810001,"duration":1}},{"uid":"f8c3077731eb5b1c","reportUrl":"https://royward.github.io/metta-wam/ci/152//#testresult/f8c3077731eb5b1c","status":"passed","time":{"start":1730492513000,"stop":1730492513001,"duration":1}}]},"tags":[]},"source":"a6f77149f0073d7d.json","parameterValues":[]}