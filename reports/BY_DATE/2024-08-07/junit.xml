<?xml version='1.0' encoding='utf-8'?>
<testsuites><testsuite name="ANTI-REGRESSION"><testcase classname="ANTI-REGRESSION" name="BC-COMP.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bc_comp.metta.html#ANTI-REGRESSION.BC-COMP.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: axiom (nums 2 3))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BC-COMP.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bc_comp.metta.html#ANTI-REGRESSION.BC-COMP.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: rule1 (-&gt; (nums $x $y) (rule1output $x $y)))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BC-COMP.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bc_comp.metta.html#ANTI-REGRESSION.BC-COMP.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: rule (-&gt; (rule1output $x $y) (-&gt; (â $x $y) (less $x $y))))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BC-COMP.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bc_comp.metta.html#ANTI-REGRESSION.BC-COMP.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: CPU (â 2 3)) &amp;kb Z))
Expected: ((: CPU (⍃ 2 3)))
Actual: ((: CPU (â 2 3)))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BC-COMP.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bc_comp.metta.html#ANTI-REGRESSION.BC-COMP.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: CPU (â 4 3)) &amp;kb Z))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BC-COMP.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bc_comp.metta.html#ANTI-REGRESSION.BC-COMP.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: $prf (less $x $y)) &amp;kb (S (S (S Z)))))
Expected: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))
Actual: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN-COMP.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain_comp.metta.html#ANTI-REGRESSION.BCHAIN-COMP.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: axiom (nums 2 3))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN-COMP.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain_comp.metta.html#ANTI-REGRESSION.BCHAIN-COMP.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: rule1 (-&gt; (nums $x $y) (rule1output $x $y)))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN-COMP.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain_comp.metta.html#ANTI-REGRESSION.BCHAIN-COMP.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: rule (-&gt; (rule1output $x $y) (-&gt; (â $x $y) (less $x $y))))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN-COMP.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain_comp.metta.html#ANTI-REGRESSION.BCHAIN-COMP.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: CPU (â 2 3)) Z))
Expected: ((: CPU (⍃ 2 3)))
Actual: ((: CPU (â 2 3)))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN-COMP.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain_comp.metta.html#ANTI-REGRESSION.BCHAIN-COMP.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: CPU (â 4 3)) Z))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN-COMP.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain_comp.metta.html#ANTI-REGRESSION.BCHAIN-COMP.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: $prf (less $x $y)) (S (S (S Z)))))
Expected: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))
Actual: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain.metta.html#ANTI-REGRESSION.BCHAIN.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: axiom (nums 2 3))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain.metta.html#ANTI-REGRESSION.BCHAIN.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: rule1 (-&gt; (nums $x $y) (rule1output $x $y)))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain.metta.html#ANTI-REGRESSION.BCHAIN.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: rule (-&gt; (rule1output $x $y) (-&gt; (â $x $y) (less $x $y))))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain.metta.html#ANTI-REGRESSION.BCHAIN.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: CPU (â 2 3)) Z))
Expected: ((: CPU (⍃ 2 3)))
Actual: ((: CPU (â 2 3)))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain.metta.html#ANTI-REGRESSION.BCHAIN.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: CPU (â 4 3)) Z))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="BCHAIN.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/bchain.metta.html#ANTI-REGRESSION.BCHAIN.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bc (: $prf (less $x $y)) (S (S (S Z)))))
Expected: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))
Actual: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="COMMA-IS-NOT-SPECIAL.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/comma_is_not_special.metta.html#ANTI-REGRESSION.COMMA-IS-NOT-SPECIAL.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (test-func2 world))
Expected: ((, hello world))
Actual: ((, hello world))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance B A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance D E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (init-miner &amp;db (ms) (highsurp)))
Expected: (() () ())
Actual: (() () () () () () () () () () () () () () ())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ("loading succAtoms into kb2"))
Expected: (("loading succAtoms into kb2"))
Actual: (("loading succAtoms into kb2"))
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;kb2 $1 (add-atom &amp;kb $1)))
Expected: (() () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () ...
Actual: (() () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () ...
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let* (($mn (msNat)) ($atom (: ms_Threshold (ms_threshold $mn)))) (add-atom &amp;kb $atom)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.09"><failure message="Test failed: Expected '((let* ((($_5702 $_5720 $_5738) (abstract-patterns)) ($_5774 ($_5702 (VarIdx Z) (VarIdx (S Z)))) ($_...' but got '(() () () () ())'" type="AssertionError">AssertionError: Test failed: Expected '((let* ((($_5702 $_5720 $_5738) (abstract-patterns)) ($_5774 ($_5702 (VarIdx Z) (VarIdx (S Z)))) ($_...' but got '(() () () () ())'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let* ((($link $a $b) (abstract-patterns)) ($aptrn ($link (VarIdx Z) (VarIdx (S Z)))) ($sptrn (specialize $link)) ($atom (: (sp_witness $sptrn) (specializationOf $sptrn $aptrn))))...
Expected: ((let* ((($_5702 $_5720 $_5738) (abstract-patterns)) ($_5774 ($_5702 (VarIdx Z) (VarIdx (S Z)))) ($_...
Actual: (() () () () ())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: minsupport (-&gt; (supportOf $ptrn $cnt) (-&gt; (ms_threshold $ms) (-&gt; (â $ms $cnt) (minsup $ptrn)))))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: apriori-rule (-&gt; (minsup $aptrn) (-&gt; (specializationOf $sptrn $aptrn) (supportOf $sptrn (countNat $sptrn)))))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="DEBUG-METTALOGTESTCURRIED.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/debug_mettalogTestCurried.metta.html#ANTI-REGRESSION.DEBUG-METTALOGTESTCURRIED.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: support-cnj (-&gt; (minsup $ptrn1) (-&gt; (minsup $ptrn2) (supportOf (, $ptrn1 $ptrn2) (countNat (, $ptrn1 $ptrn2))))))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="METTALOGTESTCURRIED2.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/mettalogTestCurried2.metta.html#ANTI-REGRESSION.METTALOGTESTCURRIED2.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let $sptrn (: SP (specializationOf (Inheritance B (VarIdx (S Z))) (Inheritance (VarIdx Z) (VarIdx (S Z))))) (add-atom &amp;kb $sptrn)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="METTALOGTESTCURRIED2.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/mettalogTestCurried2.metta.html#ANTI-REGRESSION.METTALOGTESTCURRIED2.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (: apriori-rule (-&gt; (minsup $aptrn) (-&gt; (specializationOf $sptrn $aptrn) (supportOf $sptrn (countNat $sptrn)))))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="METTALOGTESTCURRIED2.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/mettalogTestCurried2.metta.html#ANTI-REGRESSION.METTALOGTESTCURRIED2.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance B A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="METTALOGTESTCURRIED2.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/mettalogTestCurried2.metta.html#ANTI-REGRESSION.METTALOGTESTCURRIED2.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="METTALOGTESTCURRIED2.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/mettalogTestCurried2.metta.html#ANTI-REGRESSION.METTALOGTESTCURRIED2.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance D E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="METTALOGTESTCURRIED2.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/mettalogTestCurried2.metta.html#ANTI-REGRESSION.METTALOGTESTCURRIED2.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="METTALOGTESTCURRIED2.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/mettalogTestCurried2.metta.html#ANTI-REGRESSION.METTALOGTESTCURRIED2.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let (: $prf $concl) (let* (($aptrn (Inheritance (VarIdx Z) (VarIdx (S Z)))) ($atom (: MP (minsup $aptrn))) ($depth (fromNumber 2))) (fc $atom $depth)) (: PROOFTrace $concl)))
Expected: ((: PROOFTrace (minsup (Inheritance (VarIdx Z) (VarIdx (S Z))))) (: PROOFTrace (-&gt; (specializationOf...
Actual: ((: PROOFTrace (minsup (Inheritance (VarIdx Z) (VarIdx (S Z))))) (: PROOFTrace (-&gt; (specializationOf...
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-variable $x))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-variable 1))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-expression $x))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-expression (â 4 3)))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-expression (â 4 $x)))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-expression 4))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-closed $x))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-closed 4))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-closed (â $y 3)))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-closed (â 4 $x)))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TEST-IF-CLOSED.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/test_if_closed.metta.html#ANTI-REGRESSION.TEST-IF-CLOSED.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-closed (â 4 3)))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH1.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch1.metta.html#ANTI-REGRESSION.TMPMATCH1.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance B A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH1.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch1.metta.html#ANTI-REGRESSION.TMPMATCH1.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH1.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch1.metta.html#ANTI-REGRESSION.TMPMATCH1.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance D E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH1.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch1.metta.html#ANTI-REGRESSION.TMPMATCH1.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH1.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch1.metta.html#ANTI-REGRESSION.TMPMATCH1.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (miner &amp;db (ms) (depth)))
Expected: (() () () () () () () () () () (candidate (Inheritance (VarIdx Z) E) 2) (candidate (Inheritance (Var...
Actual: (() () () () () () () () () () () () () () () () (candidate (Inheritance B (VarIdx (S Z))) 1) (candi...
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH2.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch2.metta.html#ANTI-REGRESSION.TMPMATCH2.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance B A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH2.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch2.metta.html#ANTI-REGRESSION.TMPMATCH2.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C A)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH2.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch2.metta.html#ANTI-REGRESSION.TMPMATCH2.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance D E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH2.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch2.metta.html#ANTI-REGRESSION.TMPMATCH2.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;db (Inheritance C E)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="ANTI-REGRESSION" name="TMPMATCH2.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/anti-regression/tmpMatch2.metta.html#ANTI-REGRESSION.TMPMATCH2.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (miner &amp;db (ms) (depth)))
Expected: (() () () () () () () () () () (candidate (Inheritance (VarIdx Z) E) 2) (candidate (Inheritance (Var...
Actual: (() () () () () () () () () () () () () () () () (candidate (Inheritance B (VarIdx (S Z))) 1) (candi...
]]&gt;</system-out></testcase></testsuite><testsuite name="HYPERON-EXPERIMENTAL-SCRIPTS"><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A1-SYMBOLS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A1-SYMBOLS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (($x leaf2) leaf3) $x))
Expected: (leaf1 (leaf0 leaf1))
Actual: (leaf1 (leaf0 leaf1))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A1-SYMBOLS.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A1-SYMBOLS.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self ($who is a $what) ($who the $what)))
Expected: ((Sam the frog) (Tom the cat) (Sophia the robot))
Actual: ((Sam the frog) (Tom the cat) (Sophia the robot))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A1-SYMBOLS.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A1-SYMBOLS.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= (Green $who) T) ($who is really green)))
Expected: ((Sam is really green))
Actual: ((Sam is really green))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A1-SYMBOLS.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A1-SYMBOLS.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= ($color $who) T) ($who is really $color)))
Expected: ((Sam is really Green) (Tom is really White))
Actual: ((Sam is really Green) (Tom is really White))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A1-SYMBOLS.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A1-SYMBOLS.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= ($color $who) $tv) ('It's' $tv that $who is $color)))
Expected: (('It's' T that Sam is Green) ('It's' T that Tom is White) ('It's' F that Tom is Green))
Actual: (('It's' T that Sam is Green) ('It's' T that Tom is White) ('It's' F that Tom is Green))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A1-SYMBOLS.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A1-SYMBOLS.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= (Green Tom) $tv) $tv))
Expected: (F)
Actual: (F)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A1-SYMBOLS.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A1-SYMBOLS.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (isa $color color) $color))
Expected: (red green blue)
Actual: (red green blue)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A2-OPENCOGGY.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a2_opencoggy.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A2-OPENCOGGY.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (EvaluationLink (PredicateNode "eats") (ListLink $x (ConceptNode "flies"))) $x))
Expected: ((ConceptNode "Sam") (ConceptNode "Fritz"))
Actual: ((ConceptNode "Sam") (ConceptNode "Fritz"))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A3-TWOSIDE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A3-TWOSIDE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (implies (Frog Sam) $what) $what))
Expected: ((Green Sam) (Eats-flies Sam))
Actual: ((Green Sam) (Eats-flies Sam))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A3-TWOSIDE.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A3-TWOSIDE.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (implies ($P $x) (Green Sam)) ($x might be $P)))
Expected: ((Sam might be Frog))
Actual: ((Sam might be Frog))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A3-TWOSIDE.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A3-TWOSIDE.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (, (Frog $x) (implies (Frog $x) $y)) $y))
Expected: ((Green Sam) (Eats-flies Sam))
Actual: ((Green Sam) (Eats-flies Sam))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="A3-TWOSIDE.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.A3-TWOSIDE.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (, (implies ($P $x) (Green $x)) (implies ($P $x) (Eats-flies $x))) (Then it is definitely $P)))
Expected: ((Then it is definitely Frog))
Actual: ((Then it is definitely Frog))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B0-CHAINING-PRELIM.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B0-CHAINING-PRELIM.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= (S K K x) $r) $r))
Expected: ((K x (K x)))
Actual: ((K x (K x)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B0-CHAINING-PRELIM.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B0-CHAINING-PRELIM.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= (K x (K x)) $r) $r))
Expected: (x)
Actual: (x)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B0-CHAINING-PRELIM.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B0-CHAINING-PRELIM.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= (S K K x) $r) (match &amp;self (:= $r $r2) $r2)))
Expected: (x)
Actual: (x)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B0-CHAINING-PRELIM.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B0-CHAINING-PRELIM.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= (Add (S Z) (S Z)) $r) $r))
Expected: ((Add (S (S Z)) Z))
Actual: ((Add (S (S Z)) Z))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B0-CHAINING-PRELIM.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B0-CHAINING-PRELIM.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (:= (Add (S Z) (S Z)) $r) (match &amp;self (:= $r $r2) $r2)))
Expected: ((S (S Z)))
Actual: ((S (S Z)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B1-EQUAL-CHAIN.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B1-EQUAL-CHAIN.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (S K K x))
Expected: (x)
Actual: (x)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B1-EQUAL-CHAIN.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B1-EQUAL-CHAIN.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (expression without known equalities))
Expected: ((expression without known equalities))
Actual: ((expression without known equalities))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B1-EQUAL-CHAIN.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B1-EQUAL-CHAIN.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Add (S Z) (S Z)))
Expected: ((S (S Z)))
Actual: ((S (S Z)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B1-EQUAL-CHAIN.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B1-EQUAL-CHAIN.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Something? (Add (S Z) (S Z))))
Expected: ((Something? (S (S Z))))
Actual: ((Something? (S (S Z))))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B1-EQUAL-CHAIN.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B1-EQUAL-CHAIN.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (eq (S K K x) x))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B1-EQUAL-CHAIN.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B1-EQUAL-CHAIN.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (eq Green Blue))
Expected: ((eq Green Blue))
Actual: ((eq Green Blue))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B2-BACKCHAIN.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B2-BACKCHAIN.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Frog Sam))
Expected: ((Frog Sam))
Actual: ((Frog Sam))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B2-BACKCHAIN.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B2-BACKCHAIN.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (frog Sam))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B2-BACKCHAIN.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B2-BACKCHAIN.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (frog Fritz))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B2-BACKCHAIN.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B2-BACKCHAIN.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (deduce (Evaluation (mortal Plato))))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B2-BACKCHAIN.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B2-BACKCHAIN.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (explain (Evaluation (mortal Plato))))
Expected: (((mortal Plato) proven by ((human Plato) proven by (And (philosopher Plato) (likes-to-wrestle Plato...
Actual: (((mortal Plato) proven by ((human Plato) proven by (And (philosopher Plato) (likes-to-wrestle Plato...
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B3-DIRECT.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B3-DIRECT.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (green Fritz))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B3-DIRECT.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B3-DIRECT.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (ift (green $x) $x))
Expected: (Fritz)
Actual: (Fritz)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B3-DIRECT.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B3-DIRECT.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (= ($p Fritz) T) $p))
Expected: (croaks eat_flies)
Actual: (croaks eat_flies)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;self (= (color) $x) $x))
Expected: (red yellow green)
Actual: (green yellow red)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (collapse (match &amp;self (= (shape) $x) $x)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (color))
Expected: (red yellow green)
Actual: (green yellow red)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (color))
Expected: (green yellow red)
Actual: (green yellow red)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (collapse (shape)))
Expected: (((shape)))
Actual: (((shape)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (shape))
Expected: ((shape))
Actual: ((shape))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (pair (bin) (bin)))
Expected: ((A A) (A B) (B A) (B B))
Actual: ((A A) (A B) (B A) (B B))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (find-equal (color) (foo)))
Expected: (red)
Actual: (red)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (rev A (superpose (B C D))))
Expected: ((B A) (C A) (D A))
Actual: ((B A) (C A) (D A))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (is (air dry)))
Expected: ((stop ventilation) (start kettle) (start humidifier))
Actual: ((start humidifier) (start kettle) (stop ventilation))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B4-NONDETERM.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B4-NONDETERM.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (is (air wet)))
Expected: ((stop kettle) (stop humidifier) (start ventilation))
Actual: ((start ventilation) (stop humidifier) (stop kettle))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Add S Z))
Expected: (S)
Actual: (S)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.02"><failure message="Test failed: Expected '((Error S BadType))' but got '(S)'" type="AssertionError">AssertionError: Test failed: Expected '((Error S BadType))' but got '(S)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Add S Z))
Expected: ((Error S BadType))
Actual: (S)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Add (S Z) Z))
Expected: ((S Z))
Actual: ((S Z))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Add Z (S Z)))
Expected: ((S Z))
Actual: ((S Z))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Add Something Z))
Expected: (Something)
Actual: (Something)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Add Z Ten))
Expected: ((Add Z Ten))
Actual: ((Add Z Ten))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Cons (S Z) (Cons Z Nil)))
Expected: ((Cons (S Z) (Cons Z Nil)))
Actual: ((Cons (S Z) (Cons Z Nil)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.08"><failure message="Test failed: Expected '((Error (Cons Z Nil) BadType))' but got '((Cons S (Cons Z Nil)))'" type="AssertionError">AssertionError: Test failed: Expected '((Error (Cons Z Nil) BadType))' but got '((Cons S (Cons Z Nil)))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Cons S (Cons Z Nil)))
Expected: ((Error (Cons Z Nil) BadType))
Actual: ((Cons S (Cons Z Nil)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (eq (Add Z Z) Z))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (eq Z (S Z)))
Expected: ((eq Z (S Z)))
Actual: ((eq Z (S Z)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.11"><failure message="Test failed: Expected '((Error S BadType))' but got '((eq Z S))'" type="AssertionError">AssertionError: Test failed: Expected '((Error S BadType))' but got '((eq Z S))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (eq Z S))
Expected: ((Error S BadType))
Actual: ((eq Z S))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (of-same-type Color Shape))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (of-same-type Green Red))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.14"><failure message="Test failed: Expected '((Error Color BadType))' but got '(T)'" type="AssertionError">AssertionError: Test failed: Expected '((Error Color BadType))' but got '(T)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (of-same-type Green Color))
Expected: ((Error Color BadType))
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.15"><failure message="Test failed: Expected '((Error Circle BadType))' but got '(T)'" type="AssertionError">AssertionError: Test failed: Expected '((Error Circle BadType))' but got '(T)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (of-same-type Green Circle))
Expected: ((Error Circle BadType))
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Green $who))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;self (Green $who) $who))
Expected: (Sam)
Actual: (Sam)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;self (Green $who) (Green $who)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.19"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.19"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let $r (Add (S Z) Z) (match &amp;self (= (eq $r (S Z)) $tv) $tv)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.20"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.20"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (= (eq (Add (S Z) Z) (S Z)) $tv) $tv))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.21"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.21"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let (S (S $r)) (Add (S Z) (S Z)) $r))
Expected: (Z)
Actual: (Z)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.22"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.22"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let* (($r1 (Add Z Z)) ($r2 (Add $r1 (S Z))) ($r3 (Add $r2 (S Z)))) (match &amp;self (= (eq (S (S Z)) $r3) $tv) $tv)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.23"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.23"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (eqa (Add Z Z) (Add Z Z)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.24"><failure message="Test failed: Expected '((eqa Z (Add Z Z)))' but got '(T)'" type="AssertionError">AssertionError: Test failed: Expected '((eqa Z (Add Z Z)))' but got '(T)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.24"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (eqa Z (Add Z Z)))
Expected: ((eqa Z (Add Z Z)))
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.25"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.25"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (eq Z (Add Z Z)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="B5-TYPES-PRELIM.26"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.B5-TYPES-PRELIM.26"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let $z (Add Z Z) (eqa Z $z)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (+ 2 (* 3 5.5)))
Expected: (18.5)
Actual: (18.5)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (- 8 (/ 4 6.4)))
Expected: (7.375)
Actual: (7.375)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (% 21 17))
Expected: (4)
Actual: (4)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (&lt; 4 (+ 2 (* 3 5))))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (and (&gt; 4 2) (&lt; 4 3)))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (ln (+ 2 2)))
Expected: ((ln 4))
Actual: ((ln 4))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (&gt; 4 (+ ln 2)))
Expected: ((&gt; 4 (+ ln 2)))
Actual: ((&gt; 4 (+ ln 2)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (&gt; 4 (+ $x 2)))
Expected: ((&gt; 4 (+ $_204844 2)))
Actual: ((&gt; 4 (+ $_225884 2)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== 4 (+ 2 2)))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== 2 3))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== (A B) (A B)))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== (A B) (A (B C))))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== 4 (+ ln 2)))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.14"><failure message="Test failed: Expected '((Error &quot;String&quot; BadType))' but got '((+ 2 &quot;String&quot;))'" type="AssertionError">AssertionError: Test failed: Expected '((Error "String" BadType))' but got '((+ 2 "String"))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (+ 2 "String"))
Expected: ((Error "String" BadType))
Actual: ((+ 2 "String"))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.15"><failure message="Test failed: Expected '((Error ln BadType))' but got '(False)'" type="AssertionError">AssertionError: Test failed: Expected '((Error ln BadType))' but got '(False)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== 4 (+ ln 2)))
Expected: ((Error ln BadType))
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sqr 4))
Expected: (16)
Actual: (16)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ (superpose (1 2 3)) 1))
Expected: (2 3 4)
Actual: (2 3 4)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (bin))
Expected: (0 1)
Actual: (0 1)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.19"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.19"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (+ 1 (bin)))
Expected: (1 2)
Actual: (1 2 1 2)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.20"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.20"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let $x (+ 2 3) (* $x $x)))
Expected: (25)
Actual: (25)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.21"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.21"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (fact 5))
Expected: (120)
Actual: (120)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.22"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.22"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (fact 5))
Expected: (120)
Actual: (120)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C1-GROUNDED-BASIC.23"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c1_grounded_basic.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C1-GROUNDED-BASIC.23"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let $t (gen 3) (if (== (subsum (:: 3 (:: 7 (:: 5 nil))) $t) 8) $t (superpose ()))))
Expected: ((:: 1 (:: 0 (:: 1 nil))))
Actual: ((:: 1 (:: 0 (:: 1 nil))) (:: 1 (:: 0 (:: 1 nil))) (:: 1 (:: 0 (:: 1 nil))) (:: 1 (:: 0 (:: 1 nil)))...
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C2-SPACES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C2-SPACES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;kb (, ($obj is $prop) ($prop is-a Color) ($obj is-a Planet)) (Color of Planet $obj is $prop)))
Expected: ((Color of Planet Mars is Red))
Actual: ((Color of Planet Mars is Red))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C2-SPACES.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C2-SPACES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self ($p is-a Color) $p))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C2-SPACES.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C2-SPACES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;kb (, (Venus orbit $x au) (Mars orbit $y au)) (- $y $x)))
Expected: (0.8)
Actual: (0.8)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C2-SPACES.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C2-SPACES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;kb ($prop is-a Color) (match &amp;self ($obj is $prop) $obj)))
Expected: (Ball)
Actual: (Ball)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C2-SPACES.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C2-SPACES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (, ($obj is $prop) ($prop is-a Color) ($obj is-a Planet)) (Color of Planet $obj is $prop)))
Expected: ((Color of Planet Mars is Red))
Actual: ((Color of Planet Mars is Red))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C3-PLN-STV.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C3-PLN-STV.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (TV (And (PA) (PB))))
Expected: ((stv 0.3 0.8))
Actual: ((stv 0.3 0.8))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C3-PLN-STV.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C3-PLN-STV.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (TV (FA)))
Expected: ((stv 0.4 0.8))
Actual: ((stv 0.4 0.8) (stv 0.4 0.8) (stv 0.4 0.8) (stv 0.4 0.8))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C3-PLN-STV.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C3-PLN-STV.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (TV (croaks Fritz)))
Expected: ((stv 0.95 0.85))
Actual: ((stv 0.95 0.85))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C3-PLN-STV.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C3-PLN-STV.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (TV (frog Fritz)))
Expected: ((stv 0.783 0.68))
Actual: ((stv 0.783 0.68) (stv 0.783 0.68) (stv 0.783 0.68) (stv 0.783 0.68))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="C3-PLN-STV.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.C3-PLN-STV.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (TV (green Fritz)))
Expected: ((stv 0.7047 0.68))
Actual: ((stv 0.7047 0.68) (stv 0.7047 0.68) (stv 0.7047 0.68) (stv 0.7047 0.68) (stv 0.7047 0.68) (stv 0.70...
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type 5))
Expected: (Number)
Actual: (Number)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (+ 5 7)))
Expected: (Number)
Actual: (Number)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type +))
Expected: ((-&gt; Number Number Number))
Actual: ((-&gt; Number Number Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (+ 5 "4")))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (+ -)))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type Either))
Expected: (Type)
Actual: (Type)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (Left 5)))
Expected: (Either)
Actual: (Either)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (isLeft (Right 5))))
Expected: (Bool)
Actual: (Bool)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (isLeft 5)))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (LeftP 5)))
Expected: ((EitherP Number))
Actual: ((EitherP Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (pair (LeftP 5) "String")))
Expected: ((Pair (EitherP Number) String))
Actual: ((Pair (EitherP Number) String))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (Cons 5 (Cons 6 Nil))))
Expected: ((List Number))
Actual: ((List Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (Cons 5 (Cons "6" Nil))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D1-GADT.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D1-GADT.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let (List $t) (get-type (Cons 5 (Cons 6 Nil))) $t))
Expected: (Number)
Actual: (Number)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (curry +)))
Expected: ((-&gt; Number (-&gt; Number Number)))
Actual: ((-&gt; Number (-&gt; Number Number)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type ((curry +) 2)))
Expected: ((-&gt; Number Number))
Actual: ((-&gt; Number Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ((curry +) 2))
Expected: (((curry +) 2))
Actual: (((curry +) 2))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (((curry +) 2) 3))
Expected: (5)
Actual: (5)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (curry-a + 2)))
Expected: ((-&gt; Number Number))
Actual: ((-&gt; Number Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type ((curry-a + 2) 3)))
Expected: (Number)
Actual: (Number)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.07"><failure message="Test failed: Expected '()' but got '(Number)'" type="AssertionError">AssertionError: Test failed: Expected '()' but got '(Number)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type ((curry-a + 2) "S")))
Expected: ()
Actual: (Number)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((curry-a + 2) 3))
Expected: (5)
Actual: (5)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (is-socrates))
Expected: ((curry-a is Socrates))
Actual: ((curry-a is Socrates))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((curry-a is Socrates) Human))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((is-socrates) Human))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((lambda $x (+ $x 1)) 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((lambda ($x $y) (+ $x $y)) (2 7)))
Expected: (9)
Actual: (9)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((inc) 5))
Expected: (6)
Actual: (6)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.15"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (fmap (curry-a + 2) (Something 5)))
Expected: ((Something 7))
Actual: ((Something 7))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (fmap (curry-a + 2) (Nothing)))
Expected: ((Nothing))
Actual: ((Nothing))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (fmap (curry-a + 1) (Left 5))))
Expected: ((Either Number))
Actual: ((Either Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (fmap (curry-a + 2) (UntypedC 5)))
Expected: ((UntypedC 7))
Actual: ((UntypedC 7))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.19"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.19"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (fmap (curry-a + 2) (UntypedC 5 (UntypedC 8 (Null)))))
Expected: ((UntypedC 7 (UntypedC 10 (Null))))
Actual: ((UntypedC 7 (UntypedC 10 (Null))))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.20"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.20"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (fmap (curry-a + 2) (Left "5"))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.21"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.21"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (fmap (curry-a + 2) (UntypedC "5"))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.22"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.22"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (fmap (curry-a + 2) (UntypedC (Null) 5))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.23"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.23"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (fmap-i (curry-a - 7) (Right 3)))
Expected: ((Right 4))
Actual: ((Right 4))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.24"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.24"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (fmap-i (curry-a * 2) (Cons 3 (Cons 4 Nil))))
Expected: ((Cons 6 (Cons 8 Nil)))
Actual: ((Cons 6 (Cons 8 Nil)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.25"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.25"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (fmap-i (curry-a + 2) (Untyped 5)))
Expected: ((fmap-i (curry-a + 2) (Untyped 5)))
Actual: ((fmap-i (curry-a + 2) (Untyped 5)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.26"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.26"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (insert 3 (insert 2 (insert 1 Nil))))
Expected: ((Cons 1 (Cons 2 (Cons 3 Nil))))
Actual: ((Cons 1 (Cons 2 (Cons 3 Nil))))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D2-HIGHERFUNC.27"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D2-HIGHERFUNC.27"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (sort (Cons 3 (Cons 1 (Cons 2 Nil)))))
Expected: ((Cons 1 (Cons 2 (Cons 3 Nil))))
Actual: ((Cons 1 (Cons 2 (Cons 3 Nil))))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D3-DEPTYPES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D3-DEPTYPES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (Cons 0 (Cons 1 Nil))))
Expected: ((Vec Number (S (S Z))))
Actual: ((Vec Number (S (S Z))))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D3-DEPTYPES.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D3-DEPTYPES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (drop (Cons 1 Nil))))
Expected: ((Vec Number Z))
Actual: ((Vec Number Z))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D3-DEPTYPES.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D3-DEPTYPES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (drop (Cons 2 (Cons 1 Nil))))
Expected: ((Cons 1 Nil))
Actual: ((Cons 1 Nil))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D3-DEPTYPES.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D3-DEPTYPES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (drop Nil)))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D3-DEPTYPES.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D3-DEPTYPES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (ConsN "1" (ConsN "2" NilN))))
Expected: ((VecN String 2))
Actual: ((VecN String 2))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D3-DEPTYPES.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D3-DEPTYPES.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (dropN (ConsN "1" NilN))))
Expected: ((VecN String 0))
Actual: ((VecN String 0))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D3-DEPTYPES.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D3-DEPTYPES.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (dropN NilN))
Expected: ((dropN NilN))
Actual: ((dropN NilN))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (Mortal Plato)))
Expected: (Type)
Actual: (Type)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (HumansAreMortal SocratesIsHuman)))
Expected: ((Mortal Socrates))
Actual: ((Mortal Socrates))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (HumansAreMortal (Human Socrates))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ("sameTypes" (get-type SocratesIsMortal) (get-type (HumansAreMortal SocratesIsHuman))))
Expected: (("sameTypes" (Mortal Socrates) (Mortal Socrates)))
Actual: (("sameTypes" (Mortal Socrates) (Mortal Socrates)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (= SocratesIsMortal (HumansAreMortal SocratesIsHuman))))
Expected: (Type)
Actual: (Type)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ("sameTypes" (get-type (Mortal Socrates)) (get-type (Mortal Plato))))
Expected: (("sameTypes" Type Type))
Actual: (("sameTypes" Type Type))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (= (Mortal Socrates) (Mortal Plato))))
Expected: (Type)
Actual: (Type)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ("!sameTypes" (get-type SocratesIsMortal) (get-type (HumansAreMortal PlatoIsHuman))))
Expected: (("!sameTypes" (Mortal Socrates) (Mortal Plato)))
Actual: (("!sameTypes" (Mortal Socrates) (Mortal Plato)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (= SocratesIsMortal (HumansAreMortal PlatoIsHuman))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ("!sameTypes" (get-type SocratesIsHuman) ! (get-type PlatoIsHuman)))
Expected: (("!sameTypes" (Human Socrates) ! (Human Plato)))
Actual: (("!sameTypes" (Human Socrates) ! (Human Plato)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (= SocratesIsHuman PlatoIsHuman)))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ("!sameTypes" (get-type SocratesIsHuman) (get-type SocratesIsMortal)))
Expected: (("!sameTypes" (Human Socrates) (Mortal Socrates)))
Actual: (("!sameTypes" (Human Socrates) (Mortal Socrates)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type (= SocratesIsHuman SocratesIsMortal)))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.15"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (= (+ 1 1) (- 3 1)))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (= (Mortal Socrates) T))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (= (Mortal Plato) T))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (= (Mortal Plato) T))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.19"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.19"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (= (Human Sam) T))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.20"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.20"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Mortal Plato))
Expected: ((Mortal Plato))
Actual: ((Mortal Plato))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.21"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.21"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (= (= $x $x) T))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.22"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.22"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Mortal Plato))
Expected: (T)
Actual: (T)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D4-TYPE-PROP.23"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D4-TYPE-PROP.23"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (ift (Mortal $x) $x))
Expected: (Socrates Plato)
Actual: (Socrates Plato)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D5-AUTO-TYPES.01"><failure message="Test failed: Expected '((Error &quot;S&quot; BadType))' but got '(88)'" type="AssertionError">AssertionError: Test failed: Expected '((Error "S" BadType))' but got '(88)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D5-AUTO-TYPES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (+ 5 "S"))
Expected: ((Error "S" BadType))
Actual: (88)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D5-AUTO-TYPES.02"><failure message="Test failed: Expected '((Error &quot;S&quot; BadType))' but got '(False)'" type="AssertionError">AssertionError: Test failed: Expected '((Error "S" BadType))' but got '(False)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D5-AUTO-TYPES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== 5 "S"))
Expected: ((Error "S" BadType))
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D5-AUTO-TYPES.03"><failure message="Test failed: Expected '((Error SamIsMortal BadType))' but got '(False)'" type="AssertionError">AssertionError: Test failed: Expected '((Error SamIsMortal BadType))' but got '(False)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D5-AUTO-TYPES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (== SocratesIsHuman SamIsMortal))
Expected: ((Error SamIsMortal BadType))
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D5-AUTO-TYPES.04"><failure message="Test failed: Expected '((Error (Human Socrates) BadType))' but got '((HumansAreMortal (Human Socrates)))'" type="AssertionError">AssertionError: Test failed: Expected '((Error (Human Socrates) BadType))' but got '((HumansAreMortal (Human Socrates)))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D5-AUTO-TYPES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (HumansAreMortal (Human Socrates)))
Expected: ((Error (Human Socrates) BadType))
Actual: ((HumansAreMortal (Human Socrates)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D5-AUTO-TYPES.05"><failure message="Test failed: Expected '(((Error &quot;S&quot; BadType)))' but got '((88))'" type="AssertionError">AssertionError: Test failed: Expected '(((Error "S" BadType)))' but got '((88))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D5-AUTO-TYPES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (collapse (+ 5 "S")))
Expected: (((Error "S" BadType)))
Actual: ((88))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="D5-AUTO-TYPES.06"><failure message="Test failed: Expected '((Error &quot;S&quot; BadType))' but got '((f 88))'" type="AssertionError">AssertionError: Test failed: Expected '((Error "S" BadType))' but got '((f 88))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.D5-AUTO-TYPES.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (f (+ 5 "S")))
Expected: ((Error "S" BadType))
Actual: ((f 88))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E1-KB-WRITE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e1_kb_write.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E1-KB-WRITE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (ift (green $x) (add-atom &amp;kb (Green $x))))
Expected: (() ())
Actual: (() ())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E1-KB-WRITE.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e1_kb_write.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E1-KB-WRITE.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;kb (Green $x) $x))
Expected: (Fritz Sam)
Actual: (Fritz Sam)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-state (get-token)))
Expected: ((A B))
Actual: ((A B))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-token))
Expected: ((State  (A B) $_75934))
Actual: ((State  (A B) $_69888))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (new-state 2)))
Expected: ((StateMonad Number))
Actual: ((StateMonad Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type (change-state! (new-state "S") "V")))
Expected: ((StateMonad String))
Actual: ((StateMonad String))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let $v (new-state 1) (get-type $v)))
Expected: ((StateMonad Number))
Actual: ((StateMonad Number))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-type &amp;state-token))
Expected: ((StateMonad Expression))
Actual: ((StateMonad Expression))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.07"><failure message="Test failed: Expected '((Error 1 BadType))' but got '((State  1 $_220896))'" type="AssertionError">AssertionError: Test failed: Expected '((Error 1 BadType))' but got '((State  1 $_220896))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (change-state! &amp;state-token 1))
Expected: ((Error 1 BadType))
Actual: ((State  1 $_220896))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.08"><failure message="Test failed: Expected '((Error &quot;S&quot; BadType))' but got '((State  &quot;S&quot; $_247620))'" type="AssertionError">AssertionError: Test failed: Expected '((Error "S" BadType))' but got '((State  "S" $_247620))'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (change-state! (new-state 1) "S"))
Expected: ((Error "S" BadType))
Actual: ((State  "S" $_247620))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (nop (change-state! &amp;state-token (C D))))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-state (get-token)))
Expected: ((C D))
Actual: ((C D))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let $x (new-state 1) (change-state! $x (+ (get-state $x) 1))))
Expected: ((State  2 $_343784))
Actual: ((State  2 $_342374))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E2-STATES.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E2-STATES.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let $tnso (new-state 1) $tnso))
Expected: ((State  1 $_363872))
Actual: ((State  1 $_362462))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E3-MATCH-STATES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E3-MATCH-STATES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-state (status (Goal lunch-order))))
Expected: (inactive)
Actual: (inactive)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E3-MATCH-STATES.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E3-MATCH-STATES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (nop (change-state! (status (Goal lunch-order)) active)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E3-MATCH-STATES.03"><failure message="Test failed: Expected '(active)' but got '(inactive)'" type="AssertionError">AssertionError: Test failed: Expected '(active)' but got '(inactive)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E3-MATCH-STATES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (get-state (status (Goal lunch-order))))
Expected: (active)
Actual: (inactive)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E3-MATCH-STATES.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E3-MATCH-STATES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (nop (change-state! &amp;state-active inactive)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E3-MATCH-STATES.05"><failure message="Test failed: Expected '(meditation)' but got '()'" type="AssertionError">AssertionError: Test failed: Expected '(meditation)' but got '()'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E3-MATCH-STATES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;self (= (status (Goal $goal)) &amp;state-active) $goal))
Expected: (meditation)
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="E3-MATCH-STATES.06"><failure message="Test failed: Expected '(lunch-order)' but got '()'" type="AssertionError">AssertionError: Test failed: Expected '(lunch-order)' but got '()'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.E3-MATCH-STATES.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if (== (get-state (status (Goal $goal))) active) $goal (superpose ())))
Expected: (lunch-order)
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type &amp;self))
Expected: (hyperon::space::DynSpace)
Actual: (hyperon::space::DynSpace)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((let $x (get-atoms &amp;self) (get-type $x))))
Expected: ((Symbol))
Actual: ((Symbol) (Symbol))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if (&gt; 1 2) 1 2))
Expected: (2)
Actual: (2)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if True "S" "F"))
Expected: ("S")
Actual: ("S")
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;m (= (f 2) $x) $x))
Expected: ((g 3))
Actual: ((g 3))
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if True "S" "F"))
Expected: ("S")
Actual: ("S")
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if True "S" "F"))
Expected: ("S")
Actual: ("S")
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (g 2))
Expected: (102)
Actual: (102)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (f 2))
Expected: (103)
Actual: (103)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.13"><failure message="Test failed: Expected '((: __g (-&gt; Number)))' but got '(&amp;m)'" type="AssertionError">AssertionError: Test failed: Expected '((: __g (-&gt; Number)))' but got '(&amp;m)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual &amp;m)
Expected: ((: __g (-&gt; Number)))
Actual: (&amp;m)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (== (let* (($x (collapse (get-atoms &amp;m))) ($y (car-atom $x))) (get-type $y)) (get-type &amp;self)))
Expected: (False)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.15"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if (&gt; 1 2) 1 2))
Expected: (2)
Actual: (2)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (g 2))
Expected: (102)
Actual: (102)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (f 2))
Expected: (103)
Actual: (103)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (dup 2))
Expected: (12 102)
Actual: (102 12)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.19"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.19"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (g 2))
Expected: (102)
Actual: (102)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.20"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.20"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (f 2))
Expected: (103)
Actual: (103)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-IMPORTS.21"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-IMPORTS.21"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (dup 2))
Expected: (12 102)
Actual: (102 12)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_moduleA.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="HYPERON-EXPERIMENTAL-SCRIPTS" name="F1-MODULEA.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-experimental_scripts/f1_moduleA.metta.html#HYPERON-EXPERIMENTAL-SCRIPTS.F1-MODULEA.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if True "S" "F"))
Expected: ("S")
Actual: ("S")
]]&gt;</system-out></testcase></testsuite><testsuite name="HYPERON-METTALOG-SANITY"><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 (superpose (1 2 3))))
Expected: (2 3 4 2 3 4)
Actual: (2 3 4 2 3 4)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 (superpose (1 2 3))))
Expected: (2 3 4 2 3 4)
Actual: (2 3 4 2 3 4)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((superpose (1 2 3))))
Expected: ((1) (2) (3))
Actual: ((1) (2) (3))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (case (+ 1 5) ((5 Error) (6 OK) (6 Error))))
Expected: (OK)
Actual: (OK)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (case (+ 1 5) (($x (+ 1 $x)))))
Expected: (7)
Actual: (7)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (case 5 ((6 OK))))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (case (+ 1 (superpose (1 2 3))) ((3 OK-3) (4 OK-4))))
Expected: (OK-3 OK-4)
Actual: (OK-3 OK-4 OK-3 OK-4)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (case (+ 1 (superpose (1 2 3))) (($x (+ 1 $x)))))
Expected: (3 4 5)
Actual: (3 4 5 3 4 5)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (superpose ()))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (collapse (superpose ())))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (superpose ((nop 1))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (collapse (superpose ((nop 1)))))
Expected: (())
Actual: ((()))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;self $1 $1))
Expected: (&amp;corelib &amp;stdlib (= (Rel-P P P P) 10) (Rel-P A B) (Rel-Q A C))
Actual: (&amp;corelib &amp;stdlib (= (Rel-P P P P) 10) (Rel-P A B) (Rel-Q A C))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self ($Rel A $X) ($Rel A $X)))
Expected: ((Rel-P A B) (Rel-Q A C))
Actual: ((Rel-P A B) (Rel-Q A C))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.15"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (superpose ((Rel-P B) (Rel-Q C))))
Expected: ((Rel-P B) (Rel-Q C))
Actual: ((Rel-P B) (Rel-Q C))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;self ($rel A $x) ($rel $x)))
Expected: ((Rel-P B) (Rel-Q C))
Actual: ((Rel-P B) (Rel-Q C))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (superpose ((P B) (Q C))))
Expected: ((P B) (Q C))
Actual: ((P B) (Q C))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="00-LANG-CASE.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta.html#HYPERON-METTALOG-SANITY.00-LANG-CASE.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (case (match &amp;self ($rel B $x) ($rel $x)) (((Rel-P $y) (P $y)) ((Rel-Q $y) (Q $y)) (%void% no-match))))
Expected: (no-match)
Actual: (no-match)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="01-LANG-INC.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta.html#HYPERON-METTALOG-SANITY.01-LANG-INC.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (maybe-inc Nothing))
Expected: (Nothing)
Actual: (Nothing)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="01-LANG-INC.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta.html#HYPERON-METTALOG-SANITY.01-LANG-INC.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (maybe-inc (Just 2)))
Expected: ((Just 3))
Actual: ((Just 3))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="02-CURRIED-PLUS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/02-curried-plus.metta.html#HYPERON-METTALOG-SANITY.02-CURRIED-PLUS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult ((inc) 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="03-SORING-VIA-INSERT.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta.html#HYPERON-METTALOG-SANITY.03-SORING-VIA-INSERT.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type insert))
Expected: ((-&gt; $_357732 (List $_357732) (List $_357732)))
Actual: ((-&gt; $_364314 (List $_364314) (List $_364314)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="03-SORING-VIA-INSERT.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta.html#HYPERON-METTALOG-SANITY.03-SORING-VIA-INSERT.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (insert 2 (insert 1 Nil)))
Expected: ((Cons 1 (Cons 2 Nil)))
Actual: ((Cons 1 (Cons 2 Nil)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="03-SORING-VIA-INSERT.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta.html#HYPERON-METTALOG-SANITY.03-SORING-VIA-INSERT.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (Cons 1 Nil))
Expected: ((Cons 1 Nil))
Actual: ((Cons 1 Nil))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="03-SORING-VIA-INSERT.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta.html#HYPERON-METTALOG-SANITY.03-SORING-VIA-INSERT.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (insert 1 Nil))
Expected: ((Cons 1 Nil))
Actual: ((Cons 1 Nil))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="03-SORING-VIA-INSERT.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta.html#HYPERON-METTALOG-SANITY.03-SORING-VIA-INSERT.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (insert 1 (insert 2 Nil)))
Expected: ((Cons 1 (Cons 2 Nil)))
Actual: ((Cons 1 (Cons 2 Nil)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="03-SORING-VIA-INSERT.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta.html#HYPERON-METTALOG-SANITY.03-SORING-VIA-INSERT.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (insert 3 (insert 2 (insert 1 Nil))))
Expected: ((Cons 1 (Cons 2 (Cons 3 Nil))))
Actual: ((Cons 1 (Cons 2 (Cons 3 Nil))))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="06-MATCH-IN-SPACE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta.html#HYPERON-METTALOG-SANITY.06-MATCH-IN-SPACE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (SS-P_AS A_AS B_AS)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="06-MATCH-IN-SPACE.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta.html#HYPERON-METTALOG-SANITY.06-MATCH-IN-SPACE.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;kb (SS-Q_AS A_AS C_AS)))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="06-MATCH-IN-SPACE.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta.html#HYPERON-METTALOG-SANITY.06-MATCH-IN-SPACE.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;kb ($SS A_AS $X) ($SS A_AS $X)))
Expected: ((SS-P_AS A_AS B_AS) (SS-Q_AS A_AS C_AS))
Actual: ((SS-P_AS A_AS B_AS) (SS-Q_AS A_AS C_AS))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="06-MATCH-IN-SPACE.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta.html#HYPERON-METTALOG-SANITY.06-MATCH-IN-SPACE.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;kb ($rel A_AS $x) ($rel $x)))
Expected: ((SS-P_AS B_AS) (SS-Q_AS C_AS))
Actual: ((SS-P_AS B_AS) (SS-Q_AS C_AS))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="06-MATCH-IN-SPACE.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta.html#HYPERON-METTALOG-SANITY.06-MATCH-IN-SPACE.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (superpose ((P_AS B_AS) (Q_AS C_AS))))
Expected: ((P_AS B_AS) (Q_AS C_AS))
Actual: ((P_AS B_AS) (Q_AS C_AS))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="06-MATCH-IN-SPACE.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta.html#HYPERON-METTALOG-SANITY.06-MATCH-IN-SPACE.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (case (match &amp;kb ($rel B_AS $x) ($rel $x)) (((SS-P_AS $y) (P_AS $y)) ((SS-Q_AS $y) (Q_AS $y)) (%void% no-match))))
Expected: (no-match)
Actual: (no-match)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (stringToChars "xyzzy"))
Expected: (('x' 'y' 'z' 'z' 'y'))
Actual: (('x' 'y' 'z' 'z' 'y'))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (charsToString ('x' 'y' 'z' 'z' 'y')))
Expected: ("xyzzy")
Actual: ("xyzzy")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (stringToChars ""))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (charsToString ()))
Expected: ("")
Actual: ("")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (charsToString (stringToChars "xyzzy")))
Expected: ("xyzzy")
Actual: ("xyzzy")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (stringToChars (charsToString ('x' 'y' 'z' 'z' 'y'))))
Expected: (('x' 'y' 'z' 'z' 'y'))
Actual: (('x' 'y' 'z' 'z' 'y'))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (charsToString ('x' 'y' ' ' 'z' 'y')))
Expected: ("xy zy")
Actual: ("xy zy")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (stringToChars "xy zy"))
Expected: (('x' 'y' ' ' 'z' 'y'))
Actual: (('x' 'y' ' ' 'z' 'y'))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (charsToString (' ')))
Expected: (" ")
Actual: (" ")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (stringToChars " "))
Expected: ((' '))
Actual: ((' '))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (stringToChars (superpose ("ab" "cd" "ef"))))
Expected: (('a' 'b') ('c' 'd') ('e' 'f'))
Actual: (('a' 'b') ('c' 'd') ('e' 'f'))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "" (1 2 3)))
Expected: ("")
Actual: ("")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args " " (1 2 3)))
Expected: (" ")
Actual: (" ")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "{}" (1 2 3)))
Expected: ("1")
Actual: ("1")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.15"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "{}}" (1 2 3)))
Expected: ("{}")
Actual: ("{}")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "xyz zy" (1 2 3)))
Expected: ("xyz zy")
Actual: ("xyz zy")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "Indexed {1} {} {0} {}" (1 2 3)))
Expected: ("Indexed 2 1 1 2")
Actual: ("Indexed 2 1 1 2")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "Different types {} {} {} {} {} {}" (1 "2" 'c' -0.5 atom (1 2 c -0.5 atom))))
Expected: ("Different types 1 2 c -0.5 atom (1 2 c -0.5 atom)")
Actual: ("Different types 1 2 c -0.5 atom (1 2 c -0.5 atom)")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.19"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.19"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "Two digit index={11}" (0 1 2 3 4 5 6 7 8 9 10 "eleven")))
Expected: ("Two digit index=eleven")
Actual: ("Two digit index=eleven")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.20"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.20"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "Bad args list {1} {} {0} {}" x))
Expected: ((Error x BadType))
Actual: ((Error x BadType))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRING-TESTS.21"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta.html#HYPERON-METTALOG-SANITY.STRING-TESTS.21"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (format-args "Malformed format}{{}{{{}{} {4} { } {-1} {x} {{{{{{}}}}}}{{{{{}}}}}" ("success1" "success2")))
Expected: ("Malformed format}{}{success1success2 {4} { } {-1} {x} {{{}}}{{{}}}")
Actual: ("Malformed format}{}{success1success2 {4} { } {-1} {x} {{{}}}{{{}}}")
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="STRUCTURE-TESTS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta.html#HYPERON-METTALOG-SANITY.STRUCTURE-TESTS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (collapse (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3)) (superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3)) (superpose (4 5 6 4 5 6 4 5 6 4 5...
Expected: ((1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 4 ...
Actual: ((1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 4 ...
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a b b c c c d))))
Expected: (a b c d)
Actual: (a b c d)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a b c d))))
Expected: (a b c d)
Actual: (a b c d)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a))))
Expected: (a)
Actual: (a)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ())))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a a a a))))
Expected: (a)
Actual: (a)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((1 2) (1 2) (3 4)))))
Expected: ((1 2) (3 4))
Actual: ((1 2) (3 4))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (1 "hello" 1 "world" "hello" 3.14 3.14))))
Expected: (1 "hello" "world" 3.14)
Actual: (1 "hello" "world" 3.14)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (list-to-set (a b b c c c d)))
Expected: ((a b c d))
Actual: ((a b c d))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (list-to-set ((1 2) (1 2) (3 4))))
Expected: (((1 2) (3 4)))
Actual: (((1 2) (3 4)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ($x $y $x $z))))
Expected: ($_99118 $_99112 $_99106)
Actual: ($_99036 $_99030 $_99024)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: $x $y) (:: $x $z) (:: $x $y) (:: $a $b)))))
Expected: ((:: $_189810 $_189816) (:: $_189786 $_189792) (:: $_189762 $_189768))
Actual: ((:: $_155612 $_155618) (:: $_155588 $_155594) (:: $_155564 $_155570))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: $x $y) (:: $x $y) (:: $x $z) (:: $x $y)))))
Expected: ((:: $_262484 $_262490) (:: $_262460 $_262466))
Actual: ((:: $_239208 $_239214) (:: $_239184 $_239190))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: 1 $x) (:: $x "hello") (:: 1 $x) (:: $y $z) (:: $x "hello")))))
Expected: ((:: 1 $_357394) (:: $_357358 "hello") (:: $_357334 $_357340))
Actual: ((:: 1 $_323208) (:: $_323172 "hello") (:: $_323148 $_323154))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: $x (:: a b)) (:: $x (:: a b)) (:: (:: 1 $x) (:: 2 $y)) (:: (:: 1 $x) (:: 2 $y))))))
Expected: ((:: $_85024 (:: a b)) (:: (:: 1 $_84982) (:: 2 $_85006)))
Actual: ((:: $_7394 (:: a b)) (:: (:: 1 $_7352) (:: 2 $_7376)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.15"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose-bind ($x $y $x $z))))
Expected: ($_103348 $_103342 $_103336)
Actual: ($_103266 $_103260 $_103254)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose-bind ((::: $x $y) (::: $x $z) (::: $x $y) (::: $a $b)))))
Expected: ((::: $_194254 $_194260) (::: $_194230 $_194236) (::: $_194206 $_194212))
Actual: ((::: $_159954 $_159960) (::: $_159930 $_159936) (::: $_159906 $_159912))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose-bind ((::: $x $y) (::: $x $y) (::: $x $z) (::: $x $y)))))
Expected: ((::: $_267094 $_267100) (::: $_267070 $_267076))
Actual: ((::: $_243740 $_243746) (::: $_243716 $_243722))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.18"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.18"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose-bind ((::: 1 $x) (::: $x "hello") (::: 1 $x) (::: $y $z) (::: $x "hello")))))
Expected: ((::: 1 $_362168) (::: $_362132 "hello") (::: $_362108 $_362114))
Actual: ((::: 1 $_327904) (::: $_327868 "hello") (::: $_327844 $_327850))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST-02.19"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test_02.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST-02.19"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose-bind ((::: $x (::: a b)) (::: $x (::: a b)) (::: (::: 1 $x) (::: 2 $y)) (::: (::: 1 $x) (::: 2 $y))))))
Expected: ((::: $_90550 (::: a b)) (::: (::: 1 $_90508) (::: 2 $_90532)))
Actual: ((::: $_7390 (::: a b)) (::: (::: 1 $_7348) (::: 2 $_7372)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a b b c c c d))))
Expected: (a b c d)
Actual: (a b c d)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a b c d))))
Expected: (a b c d)
Actual: (a b c d)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a))))
Expected: (a)
Actual: (a)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ())))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (a a a a))))
Expected: (a)
Actual: (a)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((1 2) (1 2) (3 4)))))
Expected: ((1 2) (3 4))
Actual: ((1 2) (3 4))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose (1 "hello" 1 "world" "hello" 3.14 3.14))))
Expected: (1 "hello" "world" 3.14)
Actual: (1 "hello" "world" 3.14)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (list-to-set (a b b c c c d)))
Expected: ((a b c d))
Actual: ((a b c d))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (list-to-set ((1 2) (1 2) (3 4))))
Expected: (((1 2) (3 4)))
Actual: (((1 2) (3 4)))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ($x $y $x $z))))
Expected: ($_343712 $_343706 $_343700)
Actual: ($_343630 $_343624 $_343618)
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: $x $y) (:: $x $z) (:: $x $y) (:: $a $b)))))
Expected: ((:: $_434390 $_434396) (:: $_434366 $_434372) (:: $_434342 $_434348))
Actual: ((:: $_400192 $_400198) (:: $_400168 $_400174) (:: $_400144 $_400150))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: $x $y) (:: $x $y) (:: $x $z) (:: $x $y)))))
Expected: ((:: $_507048 $_507054) (:: $_507024 $_507030))
Actual: ((:: $_483772 $_483778) (:: $_483748 $_483754))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: 1 $x) (:: $x "hello") (:: 1 $x) (:: $y $z) (:: $x "hello")))))
Expected: ((:: 1 $_84580) (:: $_84544 "hello") (:: $_84520 $_84526))
Actual: ((:: 1 $_50394) (:: $_50358 "hello") (:: $_50334 $_50340))
]]&gt;</system-out></testcase><testcase classname="HYPERON-METTALOG-SANITY" name="UNIQUE-TEST.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta.html#HYPERON-METTALOG-SANITY.UNIQUE-TEST.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (unique (superpose ((:: $x (:: a b)) (:: $x (:: a b)) (:: (:: 1 $x) (:: 2 $y)) (:: (:: 1 $x) (:: 2 $y))))))
Expected: ((:: $_327862 (:: a b)) (:: (:: 1 $_327820) (:: 2 $_327844)))
Actual: ((:: $_234990 (:: a b)) (:: (:: 1 $_234948) (:: 2 $_234972)))
]]&gt;</system-out></testcase></testsuite><testsuite name="METTA-MORPH-TESTS"><testcase classname="METTA-MORPH-TESTS" name="ADD-ATOM-MATCH.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/add_atom_match.metta.html#METTA-MORPH-TESTS.ADD-ATOM-MATCH.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((add-atom &amp;self (man mortal)) (match &amp;self ($A mortal) (mortal $A)))))
Expected: (() (mortal man))
Actual: (() (mortal man))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="AND-OR.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/and_or.metta.html#METTA-MORPH-TESTS.AND-OR.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (If (or (and True False) True) 1 2))
Expected: (1)
Actual: (1)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="COLLAPSE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/collapse.metta.html#METTA-MORPH-TESTS.COLLAPSE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (collapse (1 2 3)))
Expected: (((1 2 3)))
Actual: (((1 2 3)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="FACTORIAL.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/factorial.metta.html#METTA-MORPH-TESTS.FACTORIAL.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (facF 10))
Expected: (3628800)
Actual: (3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 362...
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="FACTORIAL.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/factorial.metta.html#METTA-MORPH-TESTS.FACTORIAL.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (facf 10))
Expected: (3628800)
Actual: (3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 3628800 362...
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose (1 2)))
Expected: (1 2)
Actual: (1 2)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose (1 (If (== 1 2) 1))))
Expected: (1)
Actual: (1)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose ((If (== 1 2) 1) 1)))
Expected: (1)
Actual: (1)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose (1 2 3)))
Expected: (1 2 3)
Actual: (1 2 3)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose ((If (== 1 2) 1) 2 3)))
Expected: (2 3)
Actual: (2 3)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose (1 (If (== 1 2) 1) 3)))
Expected: (1 3)
Actual: (1 3)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose (1 2 (If (== 1 2) 1))))
Expected: (1 2)
Actual: (1 2)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose (1 (If (== 1 2) 1) (If (== 1 2) 1))))
Expected: (1)
Actual: (1)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose (1 2 3 4)))
Expected: (1 2 3 4)
Actual: (1 2 3 4)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="HYPERPOSE.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/hyperpose.metta.html#METTA-MORPH-TESTS.HYPERPOSE.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (hyperpose ((1 2) (3 4))))
Expected: ((1 2) (3 4))
Actual: ((1 2) (3 4))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="IDENTITY.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/identity.metta.html#METTA-MORPH-TESTS.IDENTITY.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (f 1))
Expected: (1)
Actual: (1)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="IF.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/if.metta.html#METTA-MORPH-TESTS.IF.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (If (&gt; 1 2) (3 4) (5 6)))
Expected: ((5 6))
Actual: ((5 6))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="LETLET.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/letlet.metta.html#METTA-MORPH-TESTS.LETLET.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let $T (1.0 0.9) (let* ((($f1 $c1) $T)) ($f1 $c1))))
Expected: ((1.0 0.9))
Actual: ((1.0 0.9))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="LET-SUPERPOSE-IF-CASE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/let_superpose_if_case.metta.html#METTA-MORPH-TESTS.LET-SUPERPOSE-IF-CASE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let $y (superpose (3 4 5)) (If (&gt; $y 3) (case (1 $y) (((1 3) (f 0)) ((1 4) (42 42)) ($else (1 1)))))))
Expected: ((42 42) (1 1))
Actual: ((42 42) (1 1))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="LET-SUPERPOSE-IF-CASE.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/let_superpose_if_case.metta.html#METTA-MORPH-TESTS.LET-SUPERPOSE-IF-CASE.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let $y (superpose (3 4 5)) (If (&gt; $y 3) (case (1 $y) (((1 3) (f 0)) ((1 4) (42 42)) ($else (1 1)))))))
Expected: ((42 42) (1 1))
Actual: ((42 42) (1 1))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="LET-SUPERPOSE-LIST2.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/let_superpose_list2.metta.html#METTA-MORPH-TESTS.LET-SUPERPOSE-LIST2.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (wuzaL 2 (3 4)))
Expected: ((4 3) (4 4))
Actual: ((4 3) (4 4))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="LET-SUPERPOSE-LIST.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/let_superpose_list.metta.html#METTA-MORPH-TESTS.LET-SUPERPOSE-LIST.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (wuza 5))
Expected: ((10 4) (10 5))
Actual: ((10 4) (10 5))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="LET-SUPERPOSE-LIST.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/let_superpose_list.metta.html#METTA-MORPH-TESTS.LET-SUPERPOSE-LIST.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (wuza 5))
Expected: ((10 4) (10 5))
Actual: ((10 4) (10 5))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-FEVAL.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_feval.metta.html#METTA-MORPH-TESTS.MATCH-FEVAL.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (= (f $x) $y) $y))
Expected: ((* 2 $_187074))
Actual: ((* 2 $_205218))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-SUPERPOSED-SPACES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta.html#METTA-MORPH-TESTS.MATCH-SUPERPOSED-SPACES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;attentional_focus 1))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-SUPERPOSED-SPACES.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta.html#METTA-MORPH-TESTS.MATCH-SUPERPOSED-SPACES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;concepts 2))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-SUPERPOSED-SPACES.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta.html#METTA-MORPH-TESTS.MATCH-SUPERPOSED-SPACES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;attentional_focus $1 $1))
Expected: (1)
Actual: (1)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-SUPERPOSED-SPACES.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta.html#METTA-MORPH-TESTS.MATCH-SUPERPOSED-SPACES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;concepts $1 $1))
Expected: (2)
Actual: (2)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-SUPERPOSED-SPACES.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta.html#METTA-MORPH-TESTS.MATCH-SUPERPOSED-SPACES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match (superpose (&amp;attentional_focus &amp;concepts)) $1 $1))
Expected: (1 2)
Actual: (1 2)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;belief_events $1 $1))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;belief_events belief1))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;belief_events $1 $1))
Expected: (belief1)
Actual: (belief1)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (case belief1 ((%void% 42))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (case (match &amp;belief_events $1 $1) ((%void% 42))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (case (match &amp;belief_events $1 $1) ((belief1 yes) (%void% 42))))
Expected: (yes)
Actual: (yes)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (case (match &amp;goal_events $1 $1) ((%void% 42))))
Expected: (42)
Actual: (42)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (case (match &amp;goal_events $1 $1) ((goal1 yes) (%void% 42))))
Expected: (42)
Actual: (42)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;goal_events goal1))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (case (match &amp;goal_events $1 $1) ((goal1 yes) (%void% 42))))
Expected: (yes)
Actual: (yes)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MATCH-VOID.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/match_void.metta.html#METTA-MORPH-TESTS.MATCH-VOID.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (case (match &amp;goal_events $1 $1) ((%void% 42))))
Expected: ()
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MINNARS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/minnars.metta.html#METTA-MORPH-TESTS.MINNARS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Question ((Sentence (((ExtSet garfield) --&gt; cat) (1.0 0.9)) (1)) (Sentence (((cat x sky) --&gt; like) (1.0 0.9)) (2)) (Sentence ((sky --&gt; (IntSet blue)) (1.0 0.9)) (3)) (Sentence ((...
Expected: (((1.0 0.37946790052053214) (2 1 3 4)))
Actual: (((1.0 0.37946790052053214) (2 1 3 4)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="MULTIFUNCTION.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/multifunction.metta.html#METTA-MORPH-TESTS.MULTIFUNCTION.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (g 42 (1 2)))
Expected: (1764 1764)
Actual: (1764 1764)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="NALIFIER.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/nalifier.metta.html#METTA-MORPH-TESTS.NALIFIER.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (let ($S $EV) (choiceQuery (((ExtSet sam) --&gt; duck) ((ExtSet sam) --&gt; swan) ((ExtSet sam) --&gt; dog))) $S))
Expected: ((((ExtSet sam) --&gt; duck) (1.0 0.618320610687023)))
Actual: ((((ExtSet sam) --&gt; duck) (1.0 0.6183206106870229)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="NESTED-PARAMETERS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/nested_parameters.metta.html#METTA-MORPH-TESTS.NESTED-PARAMETERS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Truth_Deduction (1.0 0.9) (1.0 0.9)))
Expected: ((1.0 0.81))
Actual: ((1.0 0.81))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="PEANO.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/peano.metta.html#METTA-MORPH-TESTS.PEANO.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (Add (S (S Z)) (S (S (S Z)))))
Expected: ((S (S (S (S (S Z))))))
Actual: ((S (S (S (S (S Z))))))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((increment) (increment))))
Expected: (2 3)
Actual: (2 3)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((increment) (increment) (increment))))
Expected: (4 5 6)
Actual: (4 5 6)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((sequential ((increment) (increment) (increment))))))
Expected: (7 8 9)
Actual: (7 8 9)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((sequential ((increment) (increment) (increment))) (sequential ((increment) (increment) (increment))))))
Expected: (10 11 12 13 14 15)
Actual: (10 11 12 13 14 15)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((sequential ((increment) (increment) (increment))) (increment) (increment) (increment))))
Expected: (16 17 18 19 20 21)
Actual: (16 17 18 19 20 21)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (do (sequential ((sequential ((increment) (increment) (increment))) (increment) (increment) (increment)))))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-state &amp;var))
Expected: (27)
Actual: (27)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((increment))))
Expected: (28)
Actual: (28)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (increment))
Expected: (29)
Actual: (29)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-state &amp;var))
Expected: (29)
Actual: (29)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (sequential ((change-state! &amp;var (+ 1 (get-state &amp;var))))))
Expected: ((State 30))
Actual: ((State  30 $_116880))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SEQUENTIAL-NESTED.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/sequential_nested.metta.html#METTA-MORPH-TESTS.SEQUENTIAL-NESTED.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-state &amp;var))
Expected: (30)
Actual: (30)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="STATES-SPACES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/states_spaces.metta.html#METTA-MORPH-TESTS.STATES-SPACES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-state &amp;FIFO))
Expected: (45)
Actual: (45)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="STATES-SPACES.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/states_spaces.metta.html#METTA-MORPH-TESTS.STATES-SPACES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;WU a))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="STATES-SPACES.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/states_spaces.metta.html#METTA-MORPH-TESTS.STATES-SPACES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;WU $1 $1))
Expected: (a)
Actual: (a)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="STATES-SPACES.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/states_spaces.metta.html#METTA-MORPH-TESTS.STATES-SPACES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (add-atom &amp;WU b))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="STATES-SPACES.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/states_spaces.metta.html#METTA-MORPH-TESTS.STATES-SPACES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (remove-atom &amp;WU a))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="STATES-SPACES.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/states_spaces.metta.html#METTA-MORPH-TESTS.STATES-SPACES.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;WU $1 $1))
Expected: (b)
Actual: (b)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (TupleConcat (a b c) (e f g)))
Expected: ((a b c e f g))
Actual: ((a b c e f g))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (TupleConcat () (e f g)))
Expected: ((e f g))
Actual: ((e f g))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (TupleConcat (a b c) ()))
Expected: ((a b c))
Actual: ((a b c))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (TupleConcat (a b c) (range 1 1)))
Expected: ((a b c))
Actual: ((a b c))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (range 1 1))
Expected: (())
Actual: (())
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (range 1 3))
Expected: ((1 2))
Actual: ((1 2))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (range 2 6))
Expected: ((2 3 4 5))
Actual: ((2 3 4 5))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERCOLLAPSE.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/supercollapse.metta.html#METTA-MORPH-TESTS.SUPERCOLLAPSE.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (range 1 10))
Expected: ((1 2 3 4 5 6 7 8 9))
Actual: ((1 2 3 4 5 6 7 8 9))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERPOSE-NESTED.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/superpose_nested.metta.html#METTA-MORPH-TESTS.SUPERPOSE-NESTED.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (superpose (a b c)))
Expected: (a b c)
Actual: (a b c)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERPOSE-NESTED.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/superpose_nested.metta.html#METTA-MORPH-TESTS.SUPERPOSE-NESTED.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (superpose ((superpose (a b c)))))
Expected: (a b c)
Actual: (a b c)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERPOSE-NESTED.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/superpose_nested.metta.html#METTA-MORPH-TESTS.SUPERPOSE-NESTED.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (superpose ((superpose (a b c)) (superpose (x y z)))))
Expected: (a b c x y z)
Actual: (a b c x y z)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="SUPERPOSE-NESTED.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/superpose_nested.metta.html#METTA-MORPH-TESTS.SUPERPOSE-NESTED.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (superpose ((superpose (a b c)) x y z)))
Expected: (a b c x y z)
Actual: (a b c x y z)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TESTS0.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/tests0.metta.html#METTA-MORPH-TESTS.TESTS0.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (I- ((Garfield --&gt; cat) (1.0 0.9)) ((cat --&gt; animal) (1.0 0.9))))
Expected: (((animal --&gt; Garfield) (1.0 0.44751381215469616)) ((Garfield --&gt; animal) (1.0 0.81)))
Actual: (((Garfield --&gt; animal) (1.0 0.81)) ((animal --&gt; Garfield) (1.0 0.44751381215469616)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TESTS0.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/tests0.metta.html#METTA-MORPH-TESTS.TESTS0.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (I- ((Garfield --&gt; carnivore) (1.0 0.9)) (((Garfield --&gt; cat) ==&gt; (Garfield --&gt; carnivore)) (1.0 0.9))))
Expected: (((Garfield --&gt; cat) (1.0 0.44751381215469616)))
Actual: (((Garfield --&gt; cat) (1.0 0.44751381215469616)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TESTS0.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/tests0.metta.html#METTA-MORPH-TESTS.TESTS0.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (I- (({(a b) } --&gt; mwawa) (1.0 0.9))))
Expected: ((({(a) } --&gt; mwawa) (1.0 0.81)) (({(b) } --&gt; mwawa) (1.0 0.81)))
Actual: ((({(a) } --&gt; mwawa) (1.0 0.81)) (({(b) } --&gt; mwawa) (1.0 0.81)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TESTS0.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/tests0.metta.html#METTA-MORPH-TESTS.TESTS0.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (I- (((a * b) --&gt; R) (1.0 0.9))))
Expected: (((a --&gt; (R /1 b)) (1.0 0.81)) ((b --&gt; (R /2 a)) (1.0 0.81)))
Actual: (((a --&gt; (R /1 b)) (1.0 0.81)) ((b --&gt; (R /2 a)) (1.0 0.81)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TESTS0.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/tests0.metta.html#METTA-MORPH-TESTS.TESTS0.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (I- ((R --&gt; (a * b)) (1.0 0.9))))
Expected: ((((R 1 b) --&gt; a) (1.0 0.81)) (((R 2 a) --&gt; b) (1.0 0.81)))
Actual: ((((R 1 b) --&gt; a) (1.0 0.81)) (((R 2 a) --&gt; b) (1.0 0.81)))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TESTS0.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/tests0.metta.html#METTA-MORPH-TESTS.TESTS0.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (I- ((A --&gt; cat) (1.0 0.9)) ((B --&gt; cat) (1.0 0.9))))
Expected: (((B --&gt; A) (1.0 0.44751381215469616)) (((A ~ B) --&gt; cat) (0.0 0.81)) (((A I B) --&gt; cat) (1.0 0.81))...
Actual: (((B --&gt; A) (1.0 0.44751381215469616)) ((B &lt;-&gt; A) (1.0 0.44751381215469616)) (((A I B) --&gt; cat) (1.0...
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TESTS0.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/tests0.metta.html#METTA-MORPH-TESTS.TESTS0.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (I- (I- ((Garfield --&gt; cat) (1.0 0.9)) ((cat --&gt; animal) (1.0 0.9))) ((animal --&gt; being) (1.0 0.9))))
Expected: (((animal --&gt; (Garfield I being)) (1.0 0.40276243093922653)) ((animal --&gt; (Garfield &amp; being)) (1.0 0...
Actual: (((Garfield --&gt; being) (1.0 0.7290000000000001)) ((being --&gt; Garfield) (1.0 0.42163100057836905)) ((...
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TYPES2.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/types2.metta.html#METTA-MORPH-TESTS.TYPES2.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type lion1))
Expected: (Lion)
Actual: (Lion)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TYPES2.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/types2.metta.html#METTA-MORPH-TESTS.TYPES2.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (reproduce lion1 lion2))
Expected: (childlion)
Actual: (childlion)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TYPES2.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/types2.metta.html#METTA-MORPH-TESTS.TYPES2.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (get-type Lion))
Expected: (Cat)
Actual: (Cat)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TYPES2.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/types2.metta.html#METTA-MORPH-TESTS.TYPES2.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (: Lion $1) $1))
Expected: (Cat)
Actual: (Cat)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TYPES2.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/types2.metta.html#METTA-MORPH-TESTS.TYPES2.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (: reproduce $1) $1))
Expected: ((-&gt; Lion Lion Lion))
Actual: ((-&gt; Lion Lion Lion))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TYPES3.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/types3.metta.html#METTA-MORPH-TESTS.TYPES3.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (GreaterThan $x $y) (If (and (== (get-type $x) Number) (== (get-type $y) Number)) (If (EqualOrGreater $x $y) yay))))
Expected: (yay)
Actual: (yay)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="TYPES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/types.metta.html#METTA-MORPH-TESTS.TYPES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (f 42))
Expected: (42)
Actual: (42)
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="ZEROARGS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/zeroargs.metta.html#METTA-MORPH-TESTS.ZEROARGS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (z))
Expected: ((z))
Actual: ((z))
]]&gt;</system-out></testcase><testcase classname="METTA-MORPH-TESTS" name="ZEROARGS.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/metta-morph_tests/zeroargs.metta.html#METTA-MORPH-TESTS.ZEROARGS.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (f))
Expected: (42)
Actual: (42)
]]&gt;</system-out></testcase></testsuite><testsuite name="MODULE-SYSTEM"><testcase classname="MODULE-SYSTEM" name="C2-SPACES.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/c2_spaces.metta.html#MODULE-SYSTEM.C2-SPACES.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;kb (, ($obj is $prop) ($prop is-a Color) ($obj is-a Planet)) (Color of Planet $obj is $prop)))
Expected: ((Color of Planet Mars is Red))
Actual: ((Color of Planet Mars is Red))
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="C2-SPACES.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/c2_spaces.metta.html#MODULE-SYSTEM.C2-SPACES.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self ($p is-a Color) $p))
Expected: ()
Actual: ()
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="C2-SPACES.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/c2_spaces.metta.html#MODULE-SYSTEM.C2-SPACES.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;kb (, (Venus orbit $x au) (Mars orbit $y au)) (- $y $x)))
Expected: (0.8)
Actual: (0.8)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="C2-SPACES.04"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/c2_spaces.metta.html#MODULE-SYSTEM.C2-SPACES.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;kb ($prop is-a Color) (match &amp;self ($obj is $prop) $obj)))
Expected: (Ball)
Actual: (Ball)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="C2-SPACES.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/c2_spaces.metta.html#MODULE-SYSTEM.C2-SPACES.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (match &amp;self (, ($obj is $prop) ($prop is-a Color) ($obj is-a Planet)) (Color of Planet $obj is $prop)))
Expected: ((Color of Planet Mars is Red))
Actual: ((Color of Planet Mars is Red))
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual ((let $x (get-atoms &amp;self) (get-type $x))))
Expected: ((Symbol) (Symbol))
Actual: ((Symbol) (Symbol))
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.02"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.02"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if (&gt; 1 2) 1 2))
Expected: (2)
Actual: (2)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-MODULEA.03"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-MODULEA.03"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.04"><failure message="Test failed: Expected '(True)' but got '(False)'" type="AssertionError">AssertionError: Test failed: Expected '(True)' but got '(False)'</failure><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.04"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let $x (collapse (get-atoms &amp;m)) (contains $x is-space)))
Expected: (True)
Actual: (False)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.05"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.05"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (match &amp;m (= (f 2) $x) $x))
Expected: ((g 3))
Actual: ((g 3))
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-MODULEA.06"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-MODULEA.06"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-MODULEA.07"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-MODULEA.07"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.08"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.08"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (g 2))
Expected: (102)
Actual: (102)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.09"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.09"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (f 2))
Expected: (103)
Actual: (103)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.10"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.10"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (let $a (collapse (get-atoms &amp;self)) (contains $a is-corelib)))
Expected: (True)
Actual: (True)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.11"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.11"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (if (&gt; 1 2) 1 2))
Expected: (2)
Actual: (2)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.12"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.12"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (g 2))
Expected: (102)
Actual: (102)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.13"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.13"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (f 2))
Expected: (103)
Actual: (103)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.14"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.14"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (dup 2))
Expected: (12 102)
Actual: (102 12)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.15"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.15"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (g 2))
Expected: (102)
Actual: (102)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.16"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.16"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (f 2))
Expected: (103)
Actual: (103)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-IMPORTS.17"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_imports.metta.html#MODULE-SYSTEM.F1-IMPORTS.17"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqualToResult (dup 2))
Expected: (12 102)
Actual: (102 12)
]]&gt;</system-out></testcase><testcase classname="MODULE-SYSTEM" name="F1-MODULEA.01"><system-out>&lt;![CDATA[
&lt;a href="https://logicmoo.org/public/metta/reports/tests_output/testrun_20240817_180743/tests/baseline_compat/module-system/f1_moduleA.metta.html#MODULE-SYSTEM.F1-MODULEA.01"&gt;Test Report&lt;/a&gt;

Assertion: (assertEqual (+ 1 2))
Expected: (3)
Actual: (3)
]]&gt;</system-out></testcase></testsuite></testsuites>
